/*
 * Copyright 2014-2023 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
    id 'com.netflix.nebula.plugin-plugin' version '20.8.0'
}

description 'Release opinions on top of gradle-git'

group = 'com.netflix.nebula'

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}


compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')


dependencies {
    implementation 'com.github.zafarkhaja:java-semver:0.9.0'
    implementation platform("com.fasterxml.jackson:jackson-bom:2.14.2")

    compileOnly platform("com.fasterxml.jackson:jackson-bom:2.11.0")
    testImplementation 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
    testImplementation ('org.ajoberstar.grgit:grgit-core:4.1.1') {
        exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
}

gradlePlugin {
    plugins {
        nebulaRelease {
            id = 'com.netflix.nebula.release'
            displayName = 'Nebula Release plugin'
            description = project.description
            implementationClass = 'nebula.plugin.release.ReleasePlugin'
            tags.set(['nebula', 'release', 'versioning', 'semver'])
        }
        nebulaReleaseLegacy {
            id = 'nebula.release'
            displayName = 'Nebula Release plugin'
            description = project.description
            implementationClass = 'nebula.plugin.release.ReleasePlugin'
            tags.set(['nebula', 'release', 'versioning', 'semver'])
        }
    }
}

/**
 * This is temporary until config cache serialization is fixed when writing tests
 * More in https://github.com/gradle/gradle/issues/25898
 */
tasks.withType(Test).configureEach {
    Provider<String> jdkVersionForTestsEnvVariable = providers.environmentVariable("JDK_VERSION_FOR_TESTS")
    Integer jdkVersionForTests = jdkVersionForTestsEnvVariable.isPresent() ? jdkVersionForTestsEnvVariable.get().toInteger() : 8
    if(jdkVersionForTests >= 17) {
        jvmArgs = [
                '--add-opens=java.base/java.lang=ALL-UNNAMED',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
                '--add-opens=java.base/java.net=ALL-UNNAMED',
                '--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED'

        ]
    }
}

